
# load("@rules_license//examples/vendor/constant_gen:defs.bzl", "constant_gen")
# load("@rules_license//rules:compliance.bzl", "licenses_used")
# load("@rules_license//rules:license_policy_check.bzl", "license_policy_check")
# load("@rules_license//rules:license.bzl", "license")

load(
    "@rules_cc//cc:defs.bzl",
    "cc_binary",
    "cc_library"
)

load(
    "@rules_pkg//:pkg.bzl",
    "pkg_tar",
    "pkg_deb",
    "pkg_zip"
)

COMMON_DEFINES = [
    "LOG_LEVEL=1",
    "DLOG4CXX_STATIC",
]

COMMON_HDRS = [

]

COMMON_SRCS = [
]

#===== win32 =====
WIN32_DEFINES = [
    "RTX_WIN32",
]
WIN32_HDRS = []
WIN32_SRCS = []
WIN32_LINKOPTS = []

# ===== linux =====
LINUX_DEFINES = [
    "RT_LINUX",
]
LINUX_HDRS = []
LINUX_SRCS = []
LINUX_LINKOPTS = [
    "-L/usr/local/lib",
    "-pthread",
    "-lrt",
    "-luuid", #avoid having libapr-1.a(rand.o):rand.c:function apr_os_uuid_get: error: undefined reference to 'uuid_generate'
]

# ===== darwin =====
DARWIN_DEFINES = []
DARWIN_HDRS = []
DARWIN_SRCS = []
DARWIN_LINKOPTS = []

cc_library(
    # linkshared/linkstatic=True,
    name = "com.github.doevelopper.rules.infra.main",
    srcs = [
      "com/github/doevelopper/rules/infra/guide/Dummy.cpp",
      "com/github/doevelopper/rules/infra/guide/Dummy.hpp",
    ] + COMMON_SRCS + COMMON_HDRS + select({
        "@bazel_tools//src/conditions:windows": WIN32_SRCS + WIN32_HDRS,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_SRCS + LINUX_HDRS,
        "//conditions:default": [],
    }),

    defines =  COMMON_DEFINES + select({
        "@bazel_tools//src/conditions:windows": WIN32_DEFINES,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_DEFINES,
        "//conditions:default": [],
    }),

    copts = select({
        "@platforms//os:windows": [
            "/std:c++17"
        ],
        "//conditions:default": [
            "-DLOG_LEVEL=1",
    #         "-D_REENTRANT",
        ],
    }),  #+ SHARED_LIBRARY_SUPPORT + DEFAULT_COPTS,

#     features = select({
#         ":windows": ["windows_export_all_symbols"],
#         "//conditions:default": [],
#     }),

    includes = [
        ".",
    ],

    linkopts = [

    ] + select({
        "@bazel_tools//src/conditions:windows": WIN32_LINKOPTS,
        "@bazel_tools//src/conditions:linux_x86_64": LINUX_LINKOPTS,
        "@bazel_tools//src/conditions:darwin": DARWIN_LINKOPTS,
    }),

    deps = [
    ] + select({
        "@bazel_tools//src/conditions:windows": [],
        "@bazel_tools//src/conditions:linux_x86_64": [],
        "@bazel_tools//src/conditions:darwin": [],
        "//conditions:default": [],
    }),

#     # Uncomment this to enable full static link.
#     # features = ['fully_static_link'],

#     # Comment this out to use system malloc runtime.
#     # malloc = '@com_google_tcmalloc//tcmalloc'

    visibility = ["//visibility:public"],
)

cc_binary(
    name = "com.github.doevelopper.rules.infra.main.bin",
    srcs = [
        "main.cpp",
    ],
    deps = [
        ":com.github.doevelopper.rules.infra.main",
    ],

    # env = [
    #     $(location log4cxx) ,
    # ],

    visibility = ["//visibility:public"],
)
